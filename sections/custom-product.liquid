<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
<style>
  .swiper-button-prev, .swiper-button-next {
    color: black;
    top: auto !important;
    height: 20px;
  }
  .swiper-button-prev::after, .swiper-button-next::after {
    font-size: 20px;
  }
  .swiper-pagination {
    color: black;
    bottom: 0 !important;
  }
  .swiper-pagination-bullet-active {
    background: black;
  }
  .product--information {
    height: fit-content;
  }
</style>

{% assign selected_variant = product.selected_or_first_available_variant %}

<div class="max-w-6xl mx-auto my-8">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
    <div class="product--medias">
      <div class="hidden md:block">
        {% comment %} 
          The "media" object is used to access all media files (images, videos etc.) 
          that are uploaded in a product.
        {% endcomment %}
        {% for media in product.media %}
          <div class="h-100 overflow-hidden p-2">
            {% comment %} 
              When using render, we can pass objects or data to snippet files like "media: media".
              This allows for using dynamic values in snippets, and making them very reusable.
            {% endcomment %}
            {% render 'product-media', media: media %}
          </div>
        {% endfor %}
      </div>

      <div class="md:hidden">
        {% comment %} 
          This "h-94" class is actually a custom defined class added in tailwind.config.js 
          it is made effective by entering "npx tailwindcss -o assets/application.css"
        {% endcomment %}
        <div class="swiper h-94">
          <div class="swiper-wrapper">
            {% for media in product.media %}  
              <div class="swiper-slide">
                <div class="h-80 overflow-hidden p-2">
                  {% render 'product-media', media: media %} 
                </div>
              </div>
            {% endfor %}
          </div>

          <div class="swiper-pagination"></div>
          <div class="swiper-button-prev"></div>
          <div class="swiper-button-next"></div>
        </div>
      </div>
    </div>

    <div class="product--information sticky top-5 p-2">
      {%form 'product', product%}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">

        <div class="my-3">
          <span class="text-xs text-gray-500">{{ product.vendor }}</span>
        </div>

        <div class="my-3">
          <h1 class="text-3xl text-gray-900">{{ product.title }}</h1>
        </div>

        <div class="my-3">
          <span class="text-base text-gray-500 line-through">
            {{ selected_variant.compare_at_price | money }}
          </span>
          <span class="text-lg text-gray-900">{{ selected_variant.price | money }}</span>

          {% if selected_variant.price < selected_variant.compare_at_price %}
            <span class="px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">
              Sale
            </span>
          {% endif %}
        </div>

        <div class="my-3">
          {% comment %} 
            This unless condition is added 
            to make sure that select variant options 
            will only apply to products with variants 
          {% endcomment %}
          {% unless product.has_only_default_variant %}
            <div data-url="{{ product.url }}" data-section="{{ section.id }}">
              {% for option in product.options_with_values %}
                <label for="Option-{{ section.id }}-{{ forloop.index0 }}">{{ option.name }}</label>
                <div class="my-2">
                  {% comment %} 
                    NOTE: The selected optin or variant is actually mapped 
                    to a query variable called "variant" in the url "?variant=".
                    So changing the variant value via url can change the selected option

                    The variant id can be retrieved by going to the product admin page                    
                  {% endcomment %}
                  <select 
                    name="options[{{ option.name | escape }}]" 
                    id="Option-{{section.id}}-{{ forloop.index0 }}" 
                    class="w-full border py-1 px-3"
                  >
                    {% for value in option.values %}
                      {% comment %} 
                        Its possible to add conditional html attributes like in below option
                        in order to apply "selected"
                      {% endcomment %}
                      <option 
                        value="{{ value | escape }}"
                        {% if option.selected_value == value %}
                          selected="selected"
                        {% endif %}
                      >
                        {{ value }}
                      </option>
                    {% endfor %}  
                  </select>
                </div>
              {% endfor %}
            </div>
          {% endunless %}

          <div class="my-3">
            <label for="Quantity-{{ section.id }}">Quantity</label>
            <div class="my-2">
              <input 
                type="number" 
                name="quantity" 
                id="Quantity-{{ section.id  }}" 
                class="w-full border px-3 py-3"
                min="1" 
                value="1"
              >
            </div>
          </div>
        </div>

        <div class="my-3">
          <p class="text-gray-700">{{ product.description }}</p>
        </div>

        <div class="my-3">
          <button 
            class="w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 rounded-sm my-2"
            {% if selected_variant.available == false %}
              disabled
            {% endif %}
          >
            {% if selected_variant.available == false %}
              Sold Out
            {% else %}
              Add to cart
            {% endif %}
          </button>
        </div>
      {% endform %}
    </div>
  </div>
</div>

{% comment %} 
  The attribute "defer" is used to make sure that the DOM has already loaded
  before running the script.
{% endcomment %}
<script defer>
  const swiper = new Swiper('.swiper', {
    direction: 'horizontal',
    loop: true,
    pagination: {
      el: '.swiper-pagination'
    },
    navigation: {
      prevEl: '.swiper-button-prev',
      nextEl: '.swiper-button-next'
    },
    autoplay: {
      delay: 5000
    }
  })
</script>

{% comment %} 
  Sometimes if "defer" is not enough, this event listener can be used to make sure it works
{% endcomment %}
{% comment %} 
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const swiper = new Swiper('.swiper', {
        direction: 'horizontal',
        pagination: {
          el: '.swiper-pagination',
          clickable: true,  // Ensure pagination bullets are clickable
        },
        navigation: {
          prevEl: '.swiper-button-prev',
          nextEl: '.swiper-button-next',
        },
      });
    });
  </script> 
{% endcomment %}